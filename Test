import java.util.Arrays;

public class DiceSumWaysMemo {

    public static int countWays(int n, int m, int s) {
        int[][] dp = new int[n + 1][s + 1];
        for (int[] row : dp) {
            Arrays.fill(row, -1); // -1 means "not computed yet"
        }
        return solve(n, m, s, dp);
    }

    private static int solve(int n, int m, int s, int[][] dp) {
        // Base cases
        if (n == 0 && s == 0) return 1;  // exactly formed sum
        if (n == 0 || s < 0) return 0;   // invalid case

        // Already computed?
        if (dp[n][s] != -1) return dp[n][s];

        int ways = 0;
        for (int face = 1; face <= m; face++) {
            ways += solve(n - 1, m, s - face, dp);
        }

        dp[n][s] = ways; // store result
        return ways;
    }

    public static void main(String[] args) {
        int n = 2, m = 6, s = 4;
        System.out.println(countWays(n, m, s)); // Output: 3
    }
}
