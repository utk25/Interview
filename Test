
import java.util.*;

public class AddKTimeSeries {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int K = sc.nextInt();

        // Store each series as a map of time â†’ value
        TreeMap<Integer, Integer>[] series = new TreeMap[K];

        for (int i = 0; i < K; i++) {
            int N = sc.nextInt();
            int[] times = new int[N];
            int[] values = new int[N];
            for (int j = 0; j < N; j++) times[j] = sc.nextInt();
            for (int j = 0; j < N; j++) values[j] = sc.nextInt();

            series[i] = new TreeMap<>();
            for (int j = 0; j < N; j++) {
                series[i].put(times[j], values[j]);
            }
        }

        // Collect all unique event times
        TreeSet<Integer> allTimes = new TreeSet<>();
        for (TreeMap<Integer, Integer> s : series) {
            allTimes.addAll(s.keySet());
        }

        // Maintain running sum
        Map<Integer, Integer> currentValues = new HashMap<>();
        int runningSum = 0;

        List<int[]> result = new ArrayList<>();

        for (int t : allTimes) {
            // Update series values at time t
            for (int i = 0; i < K; i++) {
                if (series[i].containsKey(t)) {
                    int oldVal = currentValues.getOrDefault(i, 0);
                    runningSum -= oldVal;
                    int newVal = series[i].get(t);
                    currentValues.put(i, newVal);
                    runningSum += newVal;
                }
            }

            // Record only if value changes
            if (result.isEmpty() || result.get(result.size() - 1)[1] != runningSum) {
                result.add(new int[]{t, runningSum});
            }
        }

        // Print result
        for (int[] pair : result) {
            System.out.println(pair[0] + " " + pair[1]);
        }

        sc.close();
    }
}
