import java.util.*;

public class InterviewScheduler {

    public int schedule(int[][] candidates) {
        // Step 1: Sort candidates by their end day (greedy strategy)
        Arrays.sort(candidates, Comparator.comparingInt(a -> a[1]));

        // Step 2: Find the maximum end day
        int maxDay = 0;
        int minDay = 0;
        for (int[] c : candidates) {
            minDay = Math.min(minDay, c[0]);
            maxDay = Math.max(maxDay, c[1]);
        }

        // Step 3: Create a TreeSet of available days (1 to maxDay)
        TreeSet<Integer> days = new TreeSet<>();
        for (int i = minDay; i <= maxDay; i++) {
            days.add(i);
        }

        int interviews = 0;

        // Step 4: Try to assign each candidate to the earliest available day in their range
        for (int[] c : candidates) {
            int start = c[0];
            int end = c[1];

            Integer availableDay = days.ceiling(start); // find first available day >= start

            if (availableDay != null && availableDay <= end) {
                interviews++;
                days.remove(availableDay); // Mark the day as used
            }
        }

        return interviews;
    }

    // Optional: test from main
    public static void main(String[] args) {
        InterviewScheduler scheduler = new InterviewScheduler();

        int[][] test1 = {{1, 2}, {1, 2}};
        System.out.println("Expected 2: " + scheduler.schedule(test1));

        int[][] test2 = {{1, 2}, {2, 3}, {3, 4}};
        System.out.println("Expected 3: " + scheduler.schedu
